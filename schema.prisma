generator prisma {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  schemas  = ["events", "global", "points"]
}

model event_blocks {
  block_id   BigInt    @id(map: "blocks_pkey") @default(autoincrement())
  created_at DateTime? @db.Timestamp

  @@schema("events")
}

model active_borrowers {
  id               BigInt      @id(map: "markets_borrower_pkey") @default(autoincrement())
  market           usg_markets @relation(fields: [market_id], references: [id])
  market_id        BigInt
  debt_shares      String
  borrower_address String      @db.VarChar
  block_date       DateTime    @default(now()) @db.Timestamp

  @@schema("global")
}

model liquidation_bot_log {
  id            BigInt   @id(map: "liquidation_bot_log_pkey") @default(autoincrement())
  execution_key String   @db.Uuid
  is_error      Boolean  @default(false)
  action        String
  data          Json
  date          DateTime @default(now()) @db.Timestamp

  @@index([execution_key], map: "liquidation_bot_log_execution_key_idx")
  @@schema("global")
}

model latest_global_data {
  id            BigInt      @id(map: "latest_global_data_pkey") @default(autoincrement())
  market        usg_markets @relation(fields: [market_id], references: [id])
  market_id     BigInt
  timestamp     DateTime    @db.Timestamp
  apr_projected Json
  apr_current   Json
  tvl_usd       Float
  tvl_amount    Float
  total_debt    Float
  bad_debt      Float
  oracle_price  Float
  ir_apy        Float
  reward_cut    Float

  @@schema("global")
}

model global_indicators {
  id            BigInt      @id() @default(autoincrement())
  key           String      @db.VarChar
  args        String      @db.VarChar
  values      global_indicators_values[]
   @@schema("global")
}


model global_indicators_values {
  id            BigInt      @id() @default(autoincrement())
  timestamp     DateTime    @db.Timestamp
  value         Float
  global_indicator_id BigInt
  global_indicator global_indicators @relation(fields: [global_indicator_id], references: [id])
  @@schema("global")
}



model market_global_data {
  id            BigInt      @id(map: "global_data_and_aprs_markets_history_pkey") @default(autoincrement())
  market        usg_markets @relation(fields: [market_id], references: [id])
  market_id     BigInt
  timestamp     DateTime    @db.Timestamp
  apr_projected Json
  apr_current   Json
  tvl_usd       Float
  tvl_amount    Float
  total_debt    Float
  bad_debt      Float
  oracle_price  Float
  ir_apy        Float
  reward_cut    Float

  @@schema("global")
}

model total_supplies {
  id           BigInt        @id @default(autoincrement())
  token_id     BigInt
  token        tracked_erc20 @relation(fields: [token_id], references: [id])
  timestamp    DateTime
  total_supply String        @db.VarChar

  // Need a composite index on tokenID and timestamp
  @@index([token_id, timestamp])
  @@schema("global")
}

model usg_markets {
  id                     BigInt                   @id(map: "markets_contracts_pkey") @default(autoincrement())
  contract_name          String                   @db.VarChar
  collateral_address     String                   @db.VarChar
  contract_address       String                   @db.VarChar
  contract_type          String                   @db.VarChar
  market_global_data     market_global_data[]
  active_borrowers       active_borrowers[]
  borrow                 borrow[]
  deposit                deposit[]
  zap_deposit            zap_deposit[]
  deposit_and_borrow     deposit_and_borrow[]
  zap_deposit_and_borrow zap_deposit_and_borrow[]
  withdraw               withdraw[]
  repay                  repay[]
  repay_and_withdraw     repay_and_withdraw[]
  zap_repay              zap_repay[]
  zap_repay_and_withdraw zap_repay_and_withdraw[]
  leverage               leverage[]
  zap_leverage           zap_leverage[]
  liquidate              liquidate[]
  self_liquidate         self_liquidate[]
  seize_collateral       seize_collateral[]
  migrate_from           migrate_from[]
  migrate_to             migrate_to[]
  latest_global_data     latest_global_data[]

  @@index([contract_address], map: "markets_creations_address_idx")
  @@schema("events")
}

model borrow {
  id              BigInt      @id(map: "borrow_pkey") @default(autoincrement())
  market          usg_markets @relation(fields: [market_id], references: [id])
  market_id       BigInt
  account         String      @db.VarChar
  receiver        String      @db.VarChar
  borrowed_amount String      @db.VarChar
  debt_shares     String      @db.VarChar
  block_date      DateTime    @db.Timestamp
  block_id        Int
  tx_hash         String      @db.VarChar(66)

  @@index([account], map: "borrow_account")
  @@index([market_id], map: "borrow_market_id")
  @@schema("events")
}

model deposit {
  id            BigInt      @id(map: "deposit_pkey") @default(autoincrement())
  market        usg_markets @relation(fields: [market_id], references: [id])
  market_id     BigInt
  account       String      @db.VarChar
  staked_amount String      @db.VarChar
  block_date    DateTime    @db.Timestamp
  block_id      Int
  tx_hash       String      @db.VarChar(66)

  @@index([account], map: "deposit_account")
  @@index([market_id], map: "deposit_market_id")
  @@schema("events")
}

model zap_deposit {
  id            BigInt      @id(map: "zap_deposit_pkey") @default(autoincrement())
  market        usg_markets @relation(fields: [market_id], references: [id])
  market_id     BigInt
  account       String      @db.VarChar
  staked_amount String      @db.VarChar
  token_in      String      @db.VarChar
  amount_in     String      @db.VarChar
  block_date    DateTime    @db.Timestamp
  block_id      Int
  tx_hash       String      @db.VarChar(66)

  @@index([account], map: "zap_deposit_account")
  @@index([market_id], map: "zap_deposit_market_id")
  @@schema("events")
}

model deposit_and_borrow {
  id            BigInt      @id(map: "deposit_and_borrow_pkey") @default(autoincrement())
  market        usg_markets @relation(fields: [market_id], references: [id])
  market_id     BigInt
  account       String      @db.VarChar
  staked_amount String      @db.VarChar
  borrow_amount String      @db.VarChar
  debt_shares   String      @db.VarChar
  block_date    DateTime    @db.Timestamp
  block_id      Int
  tx_hash       String      @db.VarChar(66)

  @@index([account], map: "deposit_and_borrow_account")
  @@index([market_id], map: "deposit_and_borrow_market_id")
  @@schema("events")
}

model zap_deposit_and_borrow {
  id            BigInt      @id(map: "zap_deposit_and_borrow_pkey") @default(autoincrement())
  market        usg_markets @relation(fields: [market_id], references: [id])
  market_id     BigInt
  account       String      @db.VarChar
  staked_amount String      @db.VarChar
  borrow_amount String      @db.VarChar
  debt_shares   String      @db.VarChar
  token_in      String      @db.VarChar
  amount_in     String      @db.VarChar
  block_date    DateTime    @db.Timestamp
  block_id      Int
  tx_hash       String      @db.VarChar(66)

  @@index([account], map: "zap_deposit_and_borrow_account")
  @@index([market_id], map: "zap_deposit_and_borrow_market_id")
  @@schema("events")
}

model withdraw {
  id               BigInt      @id(map: "withdraw_pkey") @default(autoincrement())
  market           usg_markets @relation(fields: [market_id], references: [id])
  market_id        BigInt
  account          String      @db.VarChar
  withdrawn_amount String      @db.VarChar
  block_date       DateTime    @db.Timestamp
  block_id         Int
  tx_hash          String      @db.VarChar(66)

  @@index([account], map: "withdraw_account")
  @@index([market_id], map: "withdraw_market_id")
  @@schema("events")
}

model repay {
  id            BigInt      @id(map: "repay_pkey") @default(autoincrement())
  market        usg_markets @relation(fields: [market_id], references: [id])
  market_id     BigInt
  account       String      @db.VarChar
  repayer       String      @db.VarChar
  repaid_amount String      @db.VarChar
  debt_shares   String      @db.VarChar
  block_date    DateTime    @db.Timestamp
  block_id      Int
  tx_hash       String      @db.VarChar(66)

  @@index([account], map: "repay_account")
  @@index([market_id], map: "repay_market_id")
  @@schema("events")
}

model repay_and_withdraw {
  id               BigInt      @id(map: "repay_and_withdraw_pkey") @default(autoincrement())
  market           usg_markets @relation(fields: [market_id], references: [id])
  market_id        BigInt
  account          String      @db.VarChar
  repaid_amount    String      @db.VarChar
  withdrawn_amount String      @db.VarChar
  debt_shares      String      @db.VarChar
  block_date       DateTime    @db.Timestamp
  block_id         Int
  tx_hash          String      @db.VarChar(66)

  @@index([account], map: "repay_and_withdraw_account")
  @@index([market_id], map: "repay_and_withdraw_market_id")
  @@schema("events")
}

model zap_repay {
  id            BigInt      @id(map: "zap_repay_pkey") @default(autoincrement())
  market        usg_markets @relation(fields: [market_id], references: [id])
  market_id     BigInt
  account       String      @db.VarChar
  repayer       String      @db.VarChar
  repaid_amount String      @db.VarChar
  debt_shares   String      @db.VarChar
  token_in      String      @db.VarChar
  amount_in     String      @db.VarChar
  block_date    DateTime    @db.Timestamp
  block_id      Int
  tx_hash       String      @db.VarChar(66)

  @@index([account], map: "zap_repay_account")
  @@index([market_id], map: "zap_repay_market_id")
  @@schema("events")
}

model zap_repay_and_withdraw {
  id               BigInt      @id(map: "zap_repay_and_withdraw_pkey") @default(autoincrement())
  market           usg_markets @relation(fields: [market_id], references: [id])
  market_id        BigInt
  account          String      @db.VarChar
  withdrawn_amount String      @db.VarChar
  repaid_amount    String      @db.VarChar
  debt_shares      String      @db.VarChar
  token_in         String      @db.VarChar
  amount_in        String      @db.VarChar
  block_date       DateTime    @db.Timestamp
  block_id         Int
  tx_hash          String      @db.VarChar(66)

  @@index([account], map: "zap_repay_and_withdraw_account")
  @@index([market_id], map: "zap_repay_and_withdraw_market_id")
  @@schema("events")
}

model leverage {
  id              BigInt      @id(map: "leverage_pkey") @default(autoincrement())
  market          usg_markets @relation(fields: [market_id], references: [id])
  market_id       BigInt
  account         String      @db.VarChar
  staked_amount   String      @db.VarChar
  collat_bought   String      @db.VarChar
  borrowed_amount String      @db.VarChar
  debt_shares     String      @db.VarChar
  block_date      DateTime    @db.Timestamp
  block_id        Int
  tx_hash         String      @db.VarChar(66)

  @@index([account], map: "leverage_account")
  @@index([market_id], map: "leverage_market_id")
  @@schema("events")
}

model zap_leverage {
  id                 BigInt      @id(map: "zap_leverage_pkey") @default(autoincrement())
  market             usg_markets @relation(fields: [market_id], references: [id])
  market_id          BigInt
  account            String      @db.VarChar
  staked_amount      String      @db.VarChar
  collat_zap_deposit String      @db.VarChar
  collat_leverage    String      @db.VarChar
  borrowed_amount    String      @db.VarChar
  debt_shares        String      @db.VarChar
  token_in           String      @db.VarChar
  amount_in          String      @db.VarChar
  block_date         DateTime    @db.Timestamp
  block_id           Int
  tx_hash            String      @db.VarChar(66)

  @@index([account], map: "zap_leverage_account")
  @@index([market_id], map: "zap_leverage_market_id")
  @@schema("events")
}

model liquidate {
  id                    BigInt      @id(map: "liquidate_pkey") @default(autoincrement())
  market                usg_markets @relation(fields: [market_id], references: [id])
  market_id             BigInt
  account               String      @db.VarChar
  repaid_amount         String      @db.VarChar
  fee                   String      @db.VarChar
  collateral_liquidated String      @db.VarChar
  liquidator            String      @db.VarChar
  debt_shares           String      @db.VarChar
  block_date            DateTime    @db.Timestamp
  block_id              Int
  tx_hash               String      @db.VarChar(66)

  @@index([account], map: "liquidate_account")
  @@index([market_id], map: "liquidate_market_id")
  @@schema("events")
}

model self_liquidate {
  id                    BigInt      @id(map: "self_liquidate_pkey") @default(autoincrement())
  market                usg_markets @relation(fields: [market_id], references: [id])
  market_id             BigInt
  account               String      @db.VarChar
  repaid_amount         String      @db.VarChar
  collateral_liquidated String      @db.VarChar
  liquidator            String      @db.VarChar
  debt_shares           String      @db.VarChar
  block_date            DateTime    @db.Timestamp
  block_id              Int
  tx_hash               String      @db.VarChar(66)

  @@index([account], map: "self_liquidate_account")
  @@index([market_id], map: "self_liquidate_market_id")
  @@schema("events")
}

model seize_collateral {
  id                BigInt      @id(map: "seize_collateral_pkey") @default(autoincrement())
  market            usg_markets @relation(fields: [market_id], references: [id])
  market_id         BigInt
  account           String      @db.VarChar
  bad_debt          String      @db.VarChar
  collateral_seized String      @db.VarChar
  block_date        DateTime    @db.Timestamp
  block_id          Int
  tx_hash           String      @db.VarChar(66)

  @@index([account], map: "seize_collateral_account")
  @@index([market_id], map: "seize_collateral_market_id")
  @@schema("events")
}

model migrate_from {
  id                BigInt      @id(map: "migrate_from_pkey") @default(autoincrement())
  market            usg_markets @relation(fields: [market_id], references: [id])
  market_id         BigInt
  account           String      @db.VarChar
  collat_withdrawn  String      @db.VarChar
  debt_removed      String      @db.VarChar
  debt_repaid       String      @db.VarChar
  debt_shares       String      @db.VarChar
  block_date        DateTime    @db.Timestamp
  block_id          Int
  tx_hash           String      @db.VarChar(66)

  @@index([account], map: "migrate_from_account")
  @@index([market_id], map: "migrate_from_market_id")
  @@schema("events")
}

model migrate_to {
  id                BigInt      @id(map: "migrate_to_pkey") @default(autoincrement())
  market            usg_markets @relation(fields: [market_id], references: [id])
  market_id         BigInt
  account           String      @db.VarChar
  collat_added      String      @db.VarChar
  debt_added        String      @db.VarChar
  debt_shares       String      @db.VarChar
  block_date        DateTime    @db.Timestamp
  block_id          Int
  tx_hash           String      @db.VarChar(66)

  @@index([account], map: "migrate_to_account")
  @@index([market_id], map: "migrate_to_market_id")
  @@schema("events")
}

 model process_report{
    id                BigInt      @id(map: "process_report_pkey") @default(autoincrement())
    token             String @db.VarChar
    gain              String @db.VarChar
    currentDebtAfter  String @db.VarChar
    block_date        DateTime @db.Timestamp 
    block_id          Int
    tx_hash           String @db.VarChar(66)
    @@index([token], map: "process_report_token_idx")
    @@index([block_date], map: "process_report_block_date_idx")
    @@schema("events")
 }



model lp_user_tasks {
  id           BigInt    @id(map: "lp_user_tasks_pkey") @default(autoincrement())
  lp_task      lp_task   @relation(fields: [task_id], references: [id])
  task_id      BigInt
  user_address String    @db.VarChar
  start        DateTime  @db.Timestamp
  closed       DateTime? @db.Timestamp
  amount       String

  @@index([task_id, user_address])
  @@index([start, closed], map: "user_tasks_start_closed_idx")
  @@index([task_id, start, closed], map: "user_tasks_taskid_start_closed_idx")
  @@schema("points")
}

model lp_task {
  id               BigInt           @id(map: "task_pkey") @default(autoincrement())
  name             String
  action_type      String           @db.VarChar
  protocol         String
  token            tracked_erc20    @relation(fields: [token_address], references: [address])
  token_address    String
  point_rate       Decimal          @db.Decimal(8, 6)
  description      String
  url              String
  is_active        Boolean          @default(true)
  price_source_id  BigInt
  price_source     price_source     @relation(fields: [price_source_id], references: [id])       
  lp_user_tasks    lp_user_tasks[]
  lp_user_points   lp_user_points[]

  @@schema("points")
}

model lp_points_block {
  block_id BigInt @id(map: "lp_points_block_pkey") @default(autoincrement())

  @@schema("points")
}

model tracked_erc20 {
  id              BigInt            @id(map: "tracked_erc20_pkey") @default(autoincrement())
  address         String            @unique
  name            String?
  symbol          String?
  lp_task         lp_task[]
  transfer_events transfer_events[]
  total_supplies  total_supplies[]

  @@schema("points")
}

model transfer_events {
  id            BigInt        @id(map: "transfer_events_pkey") @default(autoincrement())
  token         tracked_erc20 @relation(fields: [token_address], references: [address])
  token_address String        @db.VarChar
  from          String        @db.VarChar
  to            String        @db.VarChar
  amount        String        @db.VarChar
  block_date    DateTime      @db.Timestamp
  block_id      Int
  tx_hash       String        @db.VarChar(66)

  @@schema("events")
}

model user {
  id                   BigInt            @id(map: "user_pkey") @default(autoincrement())
  address              String            @unique
  onboarded            Boolean           @default(false)
  code                 String?           @unique
  godsons              referral_usages[] @relation("GodfatherRelation")
  godfather            referral_usages?  @relation("GodsonRelation")
  lp_user_points       lp_user_points[]
  user_boost           user_boost[]
  lp_referral_points   BigInt            @default(0)
  vote_referral_points BigInt            @default(0)

  @@schema("global")
}

model referral_usages {
  id           BigInt   @id(map: "referral_usages_pkey") @default(autoincrement())
  godfather_id BigInt
  godson_id    BigInt
  used_at      DateTime @default(now()) @db.Timestamp
  godfather    user     @relation(fields: [godfather_id], references: [id], name: "GodfatherRelation")
  godson       user     @relation(fields: [godson_id], references: [id], name: "GodsonRelation")

  @@unique(godson_id)
  @@schema("global")
}

model lp_user_points {
  id             BigInt  @id @default(autoincrement())
  user_address   String  @db.VarChar
  user           user    @relation(fields: [user_address], references: [address])
  task_id        BigInt
  lp_task        lp_task @relation(fields: [task_id], references: [id])
  points         BigInt
  booster_points BigInt

  @@unique([user_address, task_id], map: "user_points_task_user_uk")
  @@schema("points")
}

model lp_points_users_excluded {
  id            BigInt        @id @default(autoincrement())
  user          String        @db.VarChar
  @@schema("events")
}

model price_source {
  id                 BigInt            @id @default(autoincrement())
  name               String            @db.VarChar
  address            String            @db.VarChar
  reference          String?           @db.VarChar
  type               PriceSourceType
  lp_tasks           lp_task[]
  price_feeds        price_feeds[] 
  last_price_feeds   last_price_feeds?
  @@schema("points")
}

model price_feeds {
  id                BigInt        @id @default(autoincrement())
  timestamp         DateTime      @db.Timestamp
  price_usd         Decimal       @db.Decimal(12, 4)
  price_source      price_source  @relation(fields: [price_source_id], references: [id])
  price_source_id   BigInt

  // index added in  src\sql-functions\index_include_price.sql because include is not supported by prisma.

  @@schema("points")
}

model last_price_feeds {
  id                BigInt        @id @default(autoincrement())
  price_usd         Decimal       @db.Decimal(12, 4)
  price_source      price_source  @relation(fields: [price_source_id], references: [id])
  price_source_id   BigInt        @unique
  @@schema("points")
}

// llamaApi / curveApi / pendleApi /ERC4626 

enum PriceSourceType {
  llamaApi
  curveApi
  pendleApi
  ERC4626
  chainview
  market

  @@schema("points")
}

model user_boost {
  id           BigInt    @id @default(autoincrement())
  user_address String    @db.VarChar
  user         user      @relation(fields: [user_address], references: [address])
  multiplier   Decimal   @db.Decimal(4, 2)
  start_at     DateTime  @db.Timestamp
  end_at       DateTime? @db.Timestamp
  created_at   DateTime  @default(now()) @db.Timestamp

  @@index([user_address, start_at, end_at], map: "user_boost_user_start_end_idx")
  @@index([user_address, start_at])
  @@schema("points")
}

model offchain_boost_user {
  id           BigInt @id @default(autoincrement())
  user_address String @db.VarChar
  type         String @db.VarChar

  @@schema("points")
}

model boost_subscribers {
  id           BigInt @id @default(autoincrement())
  user_address String @db.VarChar

  @@schema("points")
}

model processed_proposal {
  id           BigInt   @id @default(autoincrement())
  proposal_id  String   @unique @db.VarChar
  title        String?  @db.VarChar
  processed_at DateTime @default(now()) @db.Timestamp

  @@schema("points")
}

model vote_task {
  id              BigInt            @id(map: "vote_task_pkey") @default(autoincrement())
  name            String
  organisation    String            @db.VarChar
  protocol        String
  point_rate      Float
  description     String
  url             String
  is_onchain      Boolean
  vote_user_tasks vote_user_tasks[]
  gauge_pools     gauge_pools[]

  @@schema("points")
}

model vote_user_tasks {
  id           BigInt    @id @default(autoincrement())
  vote_task    vote_task @relation(fields: [vote_task_id], references: [id])
  vote_task_id BigInt
  user_address String    @db.VarChar
  proposal_id  String    @db.VarChar
  voting_power Float
  points       BigInt

  @@unique([vote_task_id, user_address, proposal_id])
  @@index([user_address])
  @@index([proposal_id])
  @@schema("points")
}

model votes_points_blocks {
  block_id BigInt @id(map: "votes_points_blocks_pkey") @default(autoincrement())

  @@schema("points")
}

model gauge_controllers {
  id                 BigInt             @id @default(autoincrement())
  controller_address String             @db.VarChar
  gauge_pools        gauge_pools[]
  voter_to_exclude   voter_to_exclude[]

  @@schema("points")
}

model gauge_pools {
  id                   BigInt            @id @default(autoincrement())
  gauge_address        String            @db.VarChar
  gauge_controllers_id BigInt
  gauge_controller     gauge_controllers @relation(fields: [gauge_controllers_id], references: [id])
  gauge_votes          gauges_votes[]

  vote_task_id BigInt
  vote_task    vote_task @relation(fields: [vote_task_id], references: [id])

  @@index([vote_task_id], map: "gauge_pools_index_per_vote_task_id")
  @@index([gauge_controllers_id], map: "gauge_pools_index_per_gauge_controllers_id")
  @@schema("points")
}

model gauges_votes {
  id            BigInt      @id @default(autoincrement())
  user_address  String      @db.VarChar
  gauge_pool_id BigInt
  gauge_pool    gauge_pools @relation(fields: [gauge_pool_id], references: [id])

  @@index([gauge_pool_id], map: "gauge_votes_index_per_gauge_pool_id")
  @@schema("points")
}

model voter_to_exclude {
  id                   BigInt            @id @default(autoincrement())
  user_address         String            @db.VarChar
  gauge_controllers_id BigInt
  gauge_controller     gauge_controllers @relation(fields: [gauge_controllers_id], references: [id])

  @@index([gauge_controllers_id], map: "voter_to_exclude_index_per_gauge_controller_id")
  @@schema("points")
}

enum PointsBotAction {
  POINTS_GENERAL
  POINTS_INDEXER
  POINTS_FETCH_PRICES
  POINTS_PROCESS_USER_TASK
  POINTS_CALCULATE_POINTS
  POINTS_PROCESS_VOTE_ONCHAIN
  POINTS_PROCESS_VOTE

  @@schema("points")
}

enum ErrorLevel {
  INFO
  WARNING
  ERROR

  @@schema("points")
}

// will be used to track the no problem execution of differents processes
/// and error with is_error = true, 
// execution_key can be used to match an error with is parent process
// data will be used to track the data of the process/error
model points_bot_log {
  id            BigInt          @id @default(autoincrement())
  execution_key String          @db.Uuid
  errorLevel    ErrorLevel
  action        PointsBotAction
  message       String?         @db.VarChar
  data          Json
  date          DateTime        @default(now()) @db.Timestamp

  @@index([execution_key])
  @@index([date])
  @@schema("points")
}
