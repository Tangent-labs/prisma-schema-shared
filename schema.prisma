generator prisma {
  provider        = "prisma-client-js"
  previewFeatures = ["multiSchema"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  schemas  = ["events", "global", "points"]
}

model global_blocks {
  block_id   BigInt    @id(map: "blocks_pkey") @default(autoincrement())
  created_at DateTime? @db.Timestamptz(6)

  @@schema("events")
}

model active_borrowers {
  id               BigInt      @id(map: "markets_borrower_pkey") @default(autoincrement())
  market           usg_markets @relation(fields: [market_id], references: [id])
  market_id        BigInt
  debt_shares      String
  borrower_address String      @db.VarChar
  block_date       DateTime    @default(now())

  @@schema("global")
}

model liquidation_bot_log {
  id            BigInt   @id(map: "liquidation_bot_log_pkey") @default(autoincrement())
  execution_key String   @db.Uuid
  is_error      Boolean  @default(false)
  action        String
  data          Json
  date          DateTime @default(now())

  @@index([execution_key], map: "liquidation_bot_log_execution_key_idx")
  @@schema("global")
}

model market_global_data {
  id            BigInt      @id(map: "global_data_and_aprs_markets_history_pkey") @default(autoincrement())
  market        usg_markets @relation(fields: [market_id], references: [id])
  market_id     BigInt
  timestamp     DateTime
  apr_projected Json
  apr_current   Json
  tvl_usd       Float
  tvl_amount    Float
  total_debt    Float
  bad_debt      Float
  oracle_price  Float
  ir_apy        Float
  reward_cut    Float

  @@schema("global")
}

model usg_markets {
  id                     BigInt                   @id(map: "markets_contracts_pkey") @default(autoincrement())
  contract_name          String                   @db.VarChar
  collateral_address     String                   @db.VarChar
  contract_address       String                   @db.VarChar
  contract_type          String                   @db.VarChar
  market_global_data     market_global_data[]
  active_borrowers       active_borrowers[]
  borrow                 borrow[]
  deposit                deposit[]
  zap_deposit            zap_deposit[]
  deposit_and_borrow     deposit_and_borrow[]
  zap_deposit_and_borrow zap_deposit_and_borrow[]
  withdraw               withdraw[]
  repay                  repay[]
  repay_and_withdraw     repay_and_withdraw[]
  zap_repay              zap_repay[]
  zap_repay_and_withdraw zap_repay_and_withdraw[]
  leverage               leverage[]
  zap_leverage           zap_leverage[]
  liquidate              liquidate[]
  self_liquidate         self_liquidate[]
  seize_collateral       seize_collateral[]

  @@index([contract_address], map: "markets_creations_address_idx")
  @@schema("events")
}

model borrow {
  id              BigInt      @id(map: "borrow_pkey") @default(autoincrement())
  market          usg_markets @relation(fields: [market_id], references: [id])
  market_id       BigInt
  account         String      @db.VarChar
  receiver        String      @db.VarChar
  borrowed_amount String      @db.VarChar
  debt_shares     String      @db.VarChar
  block_date      DateTime
  block_id        Int
  tx_hash         String      @db.VarChar(66)

  @@index([account], map: "borrow_account")
  @@index([market_id], map: "borrow_market_id")
  @@schema("events")
}

model deposit {
  id            BigInt      @id(map: "deposit_pkey") @default(autoincrement())
  market        usg_markets @relation(fields: [market_id], references: [id])
  market_id     BigInt
  account       String      @db.VarChar
  staked_amount String      @db.VarChar
  block_date    DateTime
  block_id      Int
  tx_hash       String      @db.VarChar(66)

  @@index([account], map: "deposit_account")
  @@index([market_id], map: "deposit_market_id")
  @@schema("events")
}

model zap_deposit {
  id            BigInt      @id(map: "zap_deposit_pkey") @default(autoincrement())
  market        usg_markets @relation(fields: [market_id], references: [id])
  market_id     BigInt
  account       String      @db.VarChar
  staked_amount String      @db.VarChar
  token_in      String      @db.VarChar
  amount_in     String      @db.VarChar
  block_date    DateTime
  block_id      Int
  tx_hash       String      @db.VarChar(66)

  @@index([account], map: "zap_deposit_account")
  @@index([market_id], map: "zap_deposit_market_id")
  @@schema("events")
}

model deposit_and_borrow {
  id            BigInt      @id(map: "deposit_and_borrow_pkey") @default(autoincrement())
  market        usg_markets @relation(fields: [market_id], references: [id])
  market_id     BigInt
  account       String      @db.VarChar
  staked_amount String      @db.VarChar
  borrow_amount String      @db.VarChar
  debt_shares   String      @db.VarChar
  block_date    DateTime
  block_id      Int
  tx_hash       String      @db.VarChar(66)

  @@index([account], map: "deposit_and_borrow_account")
  @@index([market_id], map: "deposit_and_borrow_market_id")
  @@schema("events")
}

model zap_deposit_and_borrow {
  id            BigInt      @id(map: "zap_deposit_and_borrow_pkey") @default(autoincrement())
  market        usg_markets @relation(fields: [market_id], references: [id])
  market_id     BigInt
  account       String      @db.VarChar
  staked_amount String      @db.VarChar
  borrow_amount String      @db.VarChar
  debt_shares   String      @db.VarChar
  token_in      String      @db.VarChar
  amount_in     String      @db.VarChar
  block_date    DateTime
  block_id      Int
  tx_hash       String      @db.VarChar(66)

  @@index([account], map: "zap_deposit_and_borrow_account")
  @@index([market_id], map: "zap_deposit_and_borrow_market_id")
  @@schema("events")
}

model withdraw {
  id               BigInt      @id(map: "withdraw_pkey") @default(autoincrement())
  market           usg_markets @relation(fields: [market_id], references: [id])
  market_id        BigInt
  account          String      @db.VarChar
  withdrawn_amount String      @db.VarChar
  block_date       DateTime
  block_id         Int
  tx_hash          String      @db.VarChar(66)

  @@index([account], map: "withdraw_account")
  @@index([market_id], map: "withdraw_market_id")
  @@schema("events")
}

model repay {
  id            BigInt      @id(map: "repay_pkey") @default(autoincrement())
  market        usg_markets @relation(fields: [market_id], references: [id])
  market_id     BigInt
  account       String      @db.VarChar
  repayer       String      @db.VarChar
  repaid_amount String      @db.VarChar
  debt_shares   String      @db.VarChar
  block_date    DateTime
  block_id      Int
  tx_hash       String      @db.VarChar(66)

  @@index([account], map: "repay_account")
  @@index([market_id], map: "repay_market_id")
  @@schema("events")
}

model repay_and_withdraw {
  id               BigInt      @id(map: "repay_and_withdraw_pkey") @default(autoincrement())
  market           usg_markets @relation(fields: [market_id], references: [id])
  market_id        BigInt
  account          String      @db.VarChar
  repaid_amount    String      @db.VarChar
  withdrawn_amount String      @db.VarChar
  debt_shares      String      @db.VarChar
  block_date       DateTime
  block_id         Int
  tx_hash          String      @db.VarChar(66)

  @@index([account], map: "repay_and_withdraw_account")
  @@index([market_id], map: "repay_and_withdraw_market_id")
  @@schema("events")
}

model zap_repay {
  id            BigInt      @id(map: "zap_repay_pkey") @default(autoincrement())
  market        usg_markets @relation(fields: [market_id], references: [id])
  market_id     BigInt
  account       String      @db.VarChar
  repayer       String      @db.VarChar
  repaid_amount String      @db.VarChar
  debt_shares   String      @db.VarChar
  token_in      String      @db.VarChar
  amount_in     String      @db.VarChar
  block_date    DateTime
  block_id      Int
  tx_hash       String      @db.VarChar(66)

  @@index([account], map: "zap_repay_account")
  @@index([market_id], map: "zap_repay_market_id")
  @@schema("events")
}

model zap_repay_and_withdraw {
  id               BigInt      @id(map: "zap_repay_and_withdraw_pkey") @default(autoincrement())
  market           usg_markets @relation(fields: [market_id], references: [id])
  market_id        BigInt
  account          String      @db.VarChar
  withdrawn_amount String      @db.VarChar
  repaid_amount    String      @db.VarChar
  debt_shares      String      @db.VarChar
  token_in         String      @db.VarChar
  amount_in        String      @db.VarChar
  block_date       DateTime
  block_id         Int
  tx_hash          String      @db.VarChar(66)

  @@index([account], map: "zap_repay_and_withdraw_account")
  @@index([market_id], map: "zap_repay_and_withdraw_market_id")
  @@schema("events")
}

model leverage {
  id              BigInt      @id(map: "leverage_pkey") @default(autoincrement())
  market          usg_markets @relation(fields: [market_id], references: [id])
  market_id       BigInt
  account         String      @db.VarChar
  staked_amount   String      @db.VarChar
  collat_bought   String      @db.VarChar
  borrowed_amount String      @db.VarChar
  debt_shares     String      @db.VarChar
  block_date      DateTime
  block_id        Int
  tx_hash         String      @db.VarChar(66)

  @@index([account], map: "leverage_account")
  @@index([market_id], map: "leverage_market_id")
  @@schema("events")
}

model zap_leverage {
  id                 BigInt      @id(map: "zap_leverage_pkey") @default(autoincrement())
  market             usg_markets @relation(fields: [market_id], references: [id])
  market_id          BigInt
  account            String      @db.VarChar
  staked_amount      String      @db.VarChar
  collat_zap_deposit String      @db.VarChar
  collat_leverage    String      @db.VarChar
  borrowed_amount    String      @db.VarChar
  debt_shares        String      @db.VarChar
  token_in           String      @db.VarChar
  amount_in          String      @db.VarChar
  block_date         DateTime
  block_id           Int
  tx_hash            String      @db.VarChar(66)

  @@index([account], map: "zap_leverage_account")
  @@index([market_id], map: "zap_leverage_market_id")
  @@schema("events")
}

model liquidate {
  id                    BigInt      @id(map: "liquidate_pkey") @default(autoincrement())
  market                usg_markets @relation(fields: [market_id], references: [id])
  market_id             BigInt
  account               String      @db.VarChar
  repaid_amount         String      @db.VarChar
  fee                   String      @db.VarChar
  collateral_liquidated String      @db.VarChar
  liquidator            String      @db.VarChar
  debt_shares           String      @db.VarChar
  block_date            DateTime
  block_id              Int
  tx_hash               String      @db.VarChar(66)

  @@index([account], map: "liquidate_account")
  @@index([market_id], map: "liquidate_market_id")
  @@schema("events")
}

model self_liquidate {
  id                    BigInt      @id(map: "self_liquidate_pkey") @default(autoincrement())
  market                usg_markets @relation(fields: [market_id], references: [id])
  market_id             BigInt
  account               String      @db.VarChar
  repaid_amount         String      @db.VarChar
  collateral_liquidated String      @db.VarChar
  liquidator            String      @db.VarChar
  debt_shares           String      @db.VarChar
  block_date            DateTime
  block_id              Int
  tx_hash               String      @db.VarChar(66)

  @@index([account], map: "self_liquidate_account")
  @@index([market_id], map: "self_liquidate_market_id")
  @@schema("events")
}

model seize_collateral {
  id                BigInt      @id(map: "seize_collateral_pkey") @default(autoincrement())
  market            usg_markets @relation(fields: [market_id], references: [id])
  market_id         BigInt
  account           String      @db.VarChar
  bad_debt          String      @db.VarChar
  collateral_seized String      @db.VarChar
  block_date        DateTime
  block_id          Int
  tx_hash           String      @db.VarChar(66)

  @@index([account], map: "seize_collateral_account")
  @@index([market_id], map: "seize_collateral_market_id")
  @@schema("events")
}

model user_tasks {
  id           BigInt       @id(map: "user_tasks_pkey") @default(autoincrement())
  task         task         @relation(fields: [task_id], references: [id])
  task_id      BigInt
  user_address String       @db.VarChar
  start        DateTime     @db.Timestamp
  closed       DateTime?    @db.Timestamp
  amount       String
  user_points  user_points?

  @@index([task_id, user_address])
  @@schema("points")
}

model task {
  id            BigInt        @id(map: "task_pkey") @default(autoincrement())
  name          String
  action_type   String        @db.VarChar
  protocol      String
  token         tracked_erc20 @relation(fields: [token_address], references: [address])
  token_address String
  point_rate    Float
  unit          String
  description   String
  url           String
  is_active     Boolean       @default(true)
  user_tasks    user_tasks[]
  user_points   user_points[]

  @@schema("points")
}

model last_processed_block {
  block_id Int @id(map: "last_processed_block_pkey") @default(autoincrement())

  @@schema("points")
}

model tracked_erc20 {
  id              BigInt            @id(map: "tracked_erc20_pkey") @default(autoincrement())
  address         String            @unique
  name            String?
  symbol          String?
  task            task[]
  transfer_events transfer_events[]
  price_feeds     price_feeds[]

  @@schema("points")
}

model transfer_events {
  id            BigInt        @id(map: "transfer_events_pkey") @default(autoincrement())
  token         tracked_erc20 @relation(fields: [token_address], references: [address])
  token_address String        @db.VarChar
  from          String        @db.VarChar
  to            String        @db.VarChar
  amount        String        @db.VarChar
  block_date    DateTime
  block_id      Int
  tx_hash       String        @db.VarChar(66)

  @@schema("events")
}

model user {
  id          BigInt            @id(map: "user_pkey") @default(autoincrement())
  address     String            @unique
  onboarded   Boolean           @default(false)
  code        String?           @unique
  godsons     referral_usages[] @relation("GodfatherRelation")
  godfather   referral_usages?  @relation("GodsonRelation")
  user_points user_points[]
  user_boost  user_boost[]

  @@schema("points")
}


model referral_usages {
  id           BigInt   @id(map: "referral_usages_pkey") @default(autoincrement())
  godfather_id BigInt
  godson_id    BigInt
  used_at      DateTime @default(now())
  godfather    user     @relation(fields: [godfather_id], references: [id], name: "GodfatherRelation")
  godson       user     @relation(fields: [godson_id], references: [id], name: "GodsonRelation")

  @@unique(godson_id)
  @@schema("global")
}

model user_points {
  id           BigInt     @id @default(autoincrement())
  user_address String     @db.VarChar
  user         user       @relation(fields: [user_address], references: [address])
  task_id      BigInt
  task         task       @relation(fields: [task_id], references: [id])
  user_task_id BigInt     @unique
  user_task    user_tasks @relation(fields: [user_task_id], references: [id])
  points       Int

  @@index([task_id, user_address])
  @@schema("points")
}

model price_feeds {
  id            BigInt        @id(map: "price_feeds_pkey") @default(autoincrement())
  token_address tracked_erc20 @relation(fields: [token], references: [address])
  token         String
  timestamp     DateTime
  price_usd     String

  @@schema("points")
}

model user_boost {
  id           BigInt    @id @default(autoincrement())
  user_address String    @db.VarChar
  user         user      @relation(fields: [user_address], references: [address])
  multiplier   Decimal   @db.Decimal(4, 2)
  start_at     DateTime  @db.Timestamptz(6)
  end_at       DateTime? @db.Timestamptz(6)

  @@index([user_address, start_at])
  @@schema("points")
}
